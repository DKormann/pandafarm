// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { CreatePerson } from "./create_person_reducer.ts";
export { CreatePerson };
import { IdentityConnected } from "./identity_connected_reducer.ts";
export { IdentityConnected };
import { IdentityDisconnected } from "./identity_disconnected_reducer.ts";
export { IdentityDisconnected };
import { PlayGreen } from "./play_green_reducer.ts";
export { PlayGreen };
import { PlayRed } from "./play_red_reducer.ts";
export { PlayRed };
import { ResetBank } from "./reset_bank_reducer.ts";
export { ResetBank };
import { SellGameWorth } from "./sell_game_worth_reducer.ts";
export { SellGameWorth };
import { SetPersonName } from "./set_person_name_reducer.ts";
export { SetPersonName };

// Import and reexport all table handle types
import { GameStateTableHandle } from "./game_state_table.ts";
export { GameStateTableHandle };
import { PersonTableHandle } from "./person_table.ts";
export { PersonTableHandle };

// Import and reexport all types
import { AnimalAction } from "./animal_action_type.ts";
export { AnimalAction };
import { AnimalActionType } from "./animal_action_type_type.ts";
export { AnimalActionType };
import { GameState } from "./game_state_type.ts";
export { GameState };
import { Person } from "./person_type.ts";
export { Person };

const REMOTE_MODULE = {
  tables: {
    game_state: {
      tableName: "game_state",
      rowType: GameState.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    person: {
      tableName: "person",
      rowType: Person.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
  },
  reducers: {
    create_person: {
      reducerName: "create_person",
      argsType: CreatePerson.getTypeScriptAlgebraicType(),
    },
    identity_connected: {
      reducerName: "identity_connected",
      argsType: IdentityConnected.getTypeScriptAlgebraicType(),
    },
    identity_disconnected: {
      reducerName: "identity_disconnected",
      argsType: IdentityDisconnected.getTypeScriptAlgebraicType(),
    },
    play_green: {
      reducerName: "play_green",
      argsType: PlayGreen.getTypeScriptAlgebraicType(),
    },
    play_red: {
      reducerName: "play_red",
      argsType: PlayRed.getTypeScriptAlgebraicType(),
    },
    reset_bank: {
      reducerName: "reset_bank",
      argsType: ResetBank.getTypeScriptAlgebraicType(),
    },
    sell_game_worth: {
      reducerName: "sell_game_worth",
      argsType: SellGameWorth.getTypeScriptAlgebraicType(),
    },
    set_person_name: {
      reducerName: "set_person_name",
      argsType: SetPersonName.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "CreatePerson", args: CreatePerson }
| { name: "IdentityConnected", args: IdentityConnected }
| { name: "IdentityDisconnected", args: IdentityDisconnected }
| { name: "PlayGreen", args: PlayGreen }
| { name: "PlayRed", args: PlayRed }
| { name: "ResetBank", args: ResetBank }
| { name: "SellGameWorth", args: SellGameWorth }
| { name: "SetPersonName", args: SetPersonName }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  createPerson() {
    this.connection.callReducer("create_person", new Uint8Array(0), this.setCallReducerFlags.createPersonFlags);
  }

  onCreatePerson(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("create_person", callback);
  }

  removeOnCreatePerson(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("create_person", callback);
  }

  onIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_connected", callback);
  }

  removeOnIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_connected", callback);
  }

  onIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_disconnected", callback);
  }

  removeOnIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_disconnected", callback);
  }

  playGreen() {
    this.connection.callReducer("play_green", new Uint8Array(0), this.setCallReducerFlags.playGreenFlags);
  }

  onPlayGreen(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("play_green", callback);
  }

  removeOnPlayGreen(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("play_green", callback);
  }

  playRed() {
    this.connection.callReducer("play_red", new Uint8Array(0), this.setCallReducerFlags.playRedFlags);
  }

  onPlayRed(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("play_red", callback);
  }

  removeOnPlayRed(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("play_red", callback);
  }

  resetBank() {
    this.connection.callReducer("reset_bank", new Uint8Array(0), this.setCallReducerFlags.resetBankFlags);
  }

  onResetBank(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("reset_bank", callback);
  }

  removeOnResetBank(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("reset_bank", callback);
  }

  sellGameWorth() {
    this.connection.callReducer("sell_game_worth", new Uint8Array(0), this.setCallReducerFlags.sellGameWorthFlags);
  }

  onSellGameWorth(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("sell_game_worth", callback);
  }

  removeOnSellGameWorth(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("sell_game_worth", callback);
  }

  setPersonName(name: string) {
    const __args = { name };
    let __writer = new BinaryWriter(1024);
    SetPersonName.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("set_person_name", __argsBuffer, this.setCallReducerFlags.setPersonNameFlags);
  }

  onSetPersonName(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.onReducer("set_person_name", callback);
  }

  removeOnSetPersonName(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.offReducer("set_person_name", callback);
  }

}

export class SetReducerFlags {
  createPersonFlags: CallReducerFlags = 'FullUpdate';
  createPerson(flags: CallReducerFlags) {
    this.createPersonFlags = flags;
  }

  playGreenFlags: CallReducerFlags = 'FullUpdate';
  playGreen(flags: CallReducerFlags) {
    this.playGreenFlags = flags;
  }

  playRedFlags: CallReducerFlags = 'FullUpdate';
  playRed(flags: CallReducerFlags) {
    this.playRedFlags = flags;
  }

  resetBankFlags: CallReducerFlags = 'FullUpdate';
  resetBank(flags: CallReducerFlags) {
    this.resetBankFlags = flags;
  }

  sellGameWorthFlags: CallReducerFlags = 'FullUpdate';
  sellGameWorth(flags: CallReducerFlags) {
    this.sellGameWorthFlags = flags;
  }

  setPersonNameFlags: CallReducerFlags = 'FullUpdate';
  setPersonName(flags: CallReducerFlags) {
    this.setPersonNameFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get gameState(): GameStateTableHandle {
    return new GameStateTableHandle(this.connection.clientCache.getOrCreateTable<GameState>(REMOTE_MODULE.tables.game_state));
  }

  get person(): PersonTableHandle {
    return new PersonTableHandle(this.connection.clientCache.getOrCreateTable<Person>(REMOTE_MODULE.tables.person));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
